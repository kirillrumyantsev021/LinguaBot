import sqlite3
import random
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os

cards_router = Router()

def init_db():
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS flashcards
                         (id INTEGER PRIMARY KEY AUTOINCREMENT,
                         word TEXT NOT NULL,
                         translation TEXT NOT NULL,
                         example TEXT,
                         user_id INTEGER)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS user_progress
                         (user_id INTEGER,
                         word_id INTEGER,
                         status TEXT,
                         last_reviewed TEXT)''')
        conn.commit()

init_db()

# –ö–æ–º–∞–Ω–¥–∞ /cards - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@cards_router.message(Command("cards"))
async def cards_menu(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data="start_cards")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="add_card_menu")]
    ])
    await message.answer("üìá –†–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫", reply_markup=keyboard)

# –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@cards_router.callback_query(F.data == "start_cards")
async def start_flashcards(callback: CallbackQuery):
    conn = sqlite3.connect('flashcards.db')
    cursor = conn.cursor()
    
    # –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É, –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–Ω–∞–µ—Ç
    cursor.execute('''SELECT word FROM flashcards 
                      WHERE id NOT IN 
                      (SELECT word_id FROM user_progress 
                       WHERE user_id = ? AND status = 'known')
                      ORDER BY RANDOM() LIMIT 1''', 
                  (callback.from_user.id,))
    
    word = cursor.fetchone()
    conn.close()
    
    if not word:
        await callback.message.edit_text("üéâ –í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ /add_card")
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥", callback_data=f"reveal_{word[0]}")]
    ])
    
    await callback.message.edit_text(
        f"üî§ –°–ª–æ–≤–æ: <b>{word[0]}</b>\n\n"
        f"‚ÑπÔ∏è –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–µ—Ä–µ–≤–æ–¥",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –†–∞—Å–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞
@cards_router.callback_query(F.data.startswith("reveal_"))
async def reveal_translation(callback: CallbackQuery):
    word = callback.data.split("_")[1]
    
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT translation, example, id FROM flashcards WHERE word=?", (word,))
        result = cursor.fetchone()
    
    if not result:
        await callback.answer("–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    translation, example, card_id = result
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–Ω–∞—é", callback_data=f"know_{card_id}")],
        [InlineKeyboardButton(text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"repeat_{card_id}")],
        [InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è", callback_data="next_card")]
    ])
    
    response = f"üî§ <b>{word}</b>\n\nüá∑üá∫ {translation}"
    if example:
        response += f"\n\nüìù –ü—Ä–∏–º–µ—Ä:\n{example}"
    
    await callback.message.edit_text(
        response,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@cards_router.callback_query(F.data.startswith("know_"))
async def mark_as_known(callback: CallbackQuery):
    card_id = callback.data.split("_")[1]
    
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT OR REPLACE INTO user_progress 
                          (user_id, word_id, status) 
                          VALUES (?, ?, ?)''',
                      (callback.from_user.id, card_id, 'known'))
        conn.commit()
    
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑—É—á–µ–Ω–Ω—ã–µ!")
    await next_card(callback)

@cards_router.callback_query(F.data.startswith("repeat_"))
async def mark_for_repeat(callback: CallbackQuery):
    card_id = callback.data.split("_")[1]
    
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT OR REPLACE INTO user_progress 
                          (user_id, word_id, status) 
                          VALUES (?, ?, ?)''',
                      (callback.from_user.id, card_id, 'repeat'))
        conn.commit()
    
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ!")
    await next_card(callback)

@cards_router.callback_query(F.data == "next_card")
async def next_card(callback: CallbackQuery):
    await start_flashcards(callback)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
@cards_router.callback_query(F.data == "add_card_menu")
async def add_card_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—Å–ª–æ–≤–æ>|<–ø–µ—Ä–µ–≤–æ–¥>[|–ø—Ä–∏–º–µ—Ä]\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "cat|–∫–æ—Ç\n"
        "–∏–ª–∏\n"
        "dog|—Å–æ–±–∞–∫–∞|The dog barks - –°–æ–±–∞–∫–∞ –ª–∞–µ—Ç"
    )

@cards_router.message(F.text.contains("|"))
async def process_new_card(message: types.Message):
    try:
        parts = message.text.split("|")
        word = parts[0].strip()
        translation = parts[1].strip()
        example = parts[2].strip() if len(parts) > 2 else None
        
        with sqlite3.connect('flashcards.db') as conn:
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO flashcards (word, translation, example, user_id) VALUES (?, ?, ?, ?)",
                (word, translation, example, message.from_user.id)
            )
            conn.commit()
        
        await message.answer(f"‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{word}</b> - {translation}", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!")