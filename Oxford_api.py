import os
from aiogram import Router
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from create_bot import OXFORD_APP_ID, OXFORD_APP_KEY, YANDEX_API_KEY
import requests
from googletrans import Translator
import json

oxford_router = Router()
translator = Translator()

async def translate_to_russian(text: str) -> str:
    try:
        result = translator.translate(text, src='en', dest='ru')
        return result.text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)}")
        return text

# –ü–æ–∏—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
async def get_word_definition(word: str) -> str:
    url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{word.lower()}"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            definition = data[0]["meanings"][0]["definitions"][0]["definition"]
            translated = await translate_to_russian(definition)
            
            return (
                f"üìñ **{word.capitalize()}**:\n"
                f"üá¨üáß {definition}\n"
                f"üá∑üá∫ {translated}"
            )
        return f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ."
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

# –ö–æ–º–∞–Ω–¥–∞ /define
@oxford_router.message(Command("define"))
async def define_word(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    word = message.text.replace('/define', '').strip()
    
    if not word:
        await message.answer("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n–ü—Ä–∏–º–µ—Ä: /define hello")
        return
    
    definition = await get_word_definition(word)
    await message.answer(definition, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@oxford_router.message()
async def handle_other_messages(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /define <—Å–ª–æ–≤–æ>")
