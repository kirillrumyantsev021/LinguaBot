import sqlite3
import random
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import os
import logging
from create_bot import logger
from datetime import datetime

goal_router = Router()

def init_db():
    try:
        with sqlite3.connect('flashcards.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''CREATE TABLE IF NOT EXISTS user_goals
                            (user_id INTEGER PRIMARY KEY,
                             target_words INTEGER,
                             start_date TEXT,
                             deadline TEXT)''')
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

@goal_router.message(Command("setgoal"))
async def set_goal_command(message: types.Message):
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "<code>/setgoal –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å–ª–æ–≤</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>/setgoal 50</code> - —Ü–µ–ª—å 50 —Å–ª–æ–≤",
            parse_mode="HTML"
        )
        return
    
    target = int(args[1])
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT OR REPLACE INTO user_goals 
                        (user_id, target_words, start_date)
                        VALUES (?, ?, ?)''',
                    (message.from_user.id, target, datetime.now().date().isoformat()))
        conn.commit()
    
    await message.answer(
        f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –≤—ã—É—á–∏—Ç—å <b>{target}</b> —Å–ª–æ–≤!\n"
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
        parse_mode="HTML"
    )

@goal_router.callback_query(F.data == "stats")
async def show_stats(callback: CallbackQuery):
    try:
        with sqlite3.connect('flashcards.db') as conn:
            cursor = conn.cursor()
            
            cursor.execute("SELECT COUNT(*) FROM flashcards")
            total = cursor.fetchone()[0]
            
            cursor.execute('''SELECT COUNT(*) FROM user_progress 
                            WHERE user_id = ? AND status = 'known' ''',
                        (callback.from_user.id,))
            known = cursor.fetchone()[0]
            
            cursor.execute('''SELECT target_words, start_date FROM user_goals
                            WHERE user_id = ?''',
                        (callback.from_user.id,))
            goal_data = cursor.fetchone()
            
            goal_info = ""
            if goal_data:
                target, start_date = goal_data
                progress_percent = min(100, round(known/target*100))
                goal_info = (
                    f"\n\nüéØ –¶–µ–ª—å: {known}/{target} —Å–ª–æ–≤\n"
                    f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent}%\n"
                    f"‚è≥ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}"
                )
                
                filled = 'üü©' * (progress_percent // 10)
                empty = '‚¨ú' * (10 - (progress_percent // 10))
                goal_info += f"\n{filled}{empty}"
            else:
                goal_info = "\n\nüéØ –¶–µ–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."

        stats_message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: {total}\n"
            f"‚Ä¢ –ò–∑—É—á–µ–Ω–æ: {known}\n"
            f"{goal_info}"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üéØ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="set_goal")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])

        await callback.message.edit_text(
            stats_message,
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@goal_router.callback_query(F.data == "set_goal")
async def set_goal_handler(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã—É—á–∏—Ç—å:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>50</code> - —Ü–µ–ª—å 50 —Å–ª–æ–≤",
        parse_mode="HTML"
    )
    await callback.answer()

@goal_router.message(lambda message: message.text.isdigit() and len(message.text) < 5)
async def process_goal_input(message: types.Message):
    target = int(message.text)
    with sqlite3.connect('flashcards.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''INSERT OR REPLACE INTO user_goals 
                        (user_id, target_words, start_date)
                        VALUES (?, ?, ?)''',
                    (message.from_user.id, target, datetime.now().date().isoformat()))
        conn.commit()
    
    await message.answer(
        f"üéØ –¶–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: –≤—ã—É—á–∏—Ç—å <b>{target}</b> —Å–ª–æ–≤!\n"
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (/stats).",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats")]
        ])
    )